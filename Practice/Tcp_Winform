서버 코드

using System;

using System.Collections.Generic;

using System.ComponentModel;

using System.Data;

using System.Drawing;

using System.Linq;

using System.Net;

using System.Net.Sockets;

using System.Text;

using System.Threading;

using System.Threading.Tasks;

using System.Windows.Forms;



namespace WinFormServer

{

    public partial class Server : Form

    {

        private Socket clientSock;

        private delegate void SendMessage(string message);

        public Server()

        {

            InitializeComponent();

        }

        private void Form1_Load(object sender, EventArgs e)

        {

            Thread serverThread = new Thread(serverFunc);

            serverThread.IsBackground = true;

            serverThread.Start();

        }



        private void button1_Click_1(object sender, EventArgs e)

        {

            string message = Chat.Text;

            SendMessage send = new SendMessage(Send);

            send(message);

        }

        private void serverFunc(object obj)

        {

            try

            {

                Socket serversocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

                IPEndPoint EndPoint = new IPEndPoint(IPAddress.Any, 1103);



                serversocket.Bind(EndPoint);

                serversocket.Listen(10);



                clientSock = serversocket.Accept();



                Thread receive = new Thread(new ThreadStart(Receive));

                receive.IsBackground = true;

                receive.Start();



            }

            catch (Exception e)

            {

                clientSock.Close();

                MessageBox.Show(e.Message);

            }

        }

        private void Receive()

        {

            while (true)

            {

                try

                {

                    byte[] recvbytes = new byte[1024];

                    int irecv = clientSock.Receive(recvbytes, recvbytes.Length, SocketFlags.None);

                    string txt = Encoding.UTF8.GetString(recvbytes, 0, recvbytes.Length);

                    ChatBox.AppendText("client : " + txt);

                    ChatBox.AppendText(Environment.NewLine);

                }

                catch (Exception e)

                {

                    clientSock.Close();

                    MessageBox.Show(e.Message);

                }

            }

        }

        private void Send(object message)

        {

            string sendmessage = Convert.ToString(message);

            byte[] sendbytes = Encoding.UTF8.GetBytes(sendmessage.Trim());

            clientSock.Send(sendbytes);

            string txt = Encoding.UTF8.GetString(sendbytes, 0, sendbytes.Length);

            ChatBox.AppendText("server : " + txt);

            ChatBox.AppendText(Environment.NewLine);

        }





    }

}


클라이언트 코드
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WinFormClient
{
    public partial class Form1 : Form
    {
        Socket socket;
        private delegate void SendMessage(string message);
        public Form1()
        {
            InitializeComponent();
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            Thread clientThread = new Thread(clientFunc);
            clientThread.IsBackground = true;
            clientThread.Start();
        }
        private void button1_Click_1(object sender, EventArgs e)
        {
            string message = Chat.Text;
            SendMessage send = new SendMessage(Send);
            send(message);
        }
        private void clientFunc(object obj)
        {
            try
            {
                socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

                IPEndPoint endpoint = new IPEndPoint(IPAddress.Loopback, 1103);

                socket.Connect(endpoint);

                Thread receive = new Thread(new ThreadStart(Receive));
                receive.IsBackground = true;
                receive.Start();

            }
            catch (Exception e)
            {
                socket.Close();
                MessageBox.Show(e.Message);
            }
        }
        private void Receive()
        {
            while (true)
            {
                try
                {
                    byte[] recvbytes = new byte[1024];
                    socket.Receive(recvbytes, recvbytes.Length, SocketFlags.None);
                    string txt = Encoding.UTF8.GetString(recvbytes, 0, recvbytes.Length);
                    ChatBox.AppendText("server : " + txt);
                    ChatBox.AppendText(Environment.NewLine);
                }
                catch (Exception e)
                {
                    socket.Close();
                    MessageBox.Show(e.Message);
                }
            }
        }
        private void Send(object message)
        {
            string sendmessage = Convert.ToString(message);
            byte[] sendbytes = Encoding.UTF8.GetBytes(sendmessage.Trim());
            socket.Send(sendbytes);
            string txt = Encoding.UTF8.GetString(sendbytes, 0, sendbytes.Length);
            ChatBox.AppendText("client : " + txt);
            ChatBox.AppendText(Environment.NewLine);
        }
    }
}
