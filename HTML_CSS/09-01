최신버전 업데이트
sudo npm install -g npm

npm init

npm install express

ctrl + ` 버튼 누르면 visual studio에서 콘솔창으로 터미널 조작 가능

javascript 문법 ...
let arr3 = [...arr2, ...arr1]

let cd = "CD"
let alphabet = ['A', 'B', ...cd]

console.log(alphabet) 
['A', 'B', 'C', 'D']

var{firstName, lastName, age, city} = getPerson()

console.log(age)
console.log(city)

fucntion displayFullName({firstName, lastName, age, city} = getPerson()

console.log(age)
console.log(city)

function displayFullName({firstName, lastName}){
	console.log(`${firstName} ${lastName}`)
}

displayFullName(getPerson())

function getScores() {
	return [70, 80, 90]
}

let scores = getScores()
let x = scores[0],
y = scores[1],
z = scores[2]

console.log(`${x} : ${y} : ${z}`)

function getProfile() {}{
	return [
		'John',
		'Doe',
		['Red', 'Green', 'Blue']
	]
}

let [
	firstName,
	lastname,
	[
		color1,
		color2,
		color3
	]
] = getProfile()

console.log(color1, color2, color3)

function say(message){
	if(message != undefined){
	}else{
		console.log("파라미터가 넘어오지 않았어요")
}
default function parameter
function say(message = "파라미터가 넘어오지 않았습니다.")
{
 	console.log(message)
}
say();

function sum(...args){
	let total = 0
	for(let x of args){
		total +=x
	}
	return total
}

console.log(sum(3,2,5,7,4,23))

//Promise
consst Pormise = new Promis((resolve, reject) => {
	if(true /* 처리 성공*/){
	} else {
		reject (new Error ("에러")
	}
})

//Async 비동기
async function myFunction(){
	const r = await asyncFunction()
}

const myFunction2 = async() => {
	const r = await asyncFunction()
}

//Class

class Car{
	constructor(modelName){
	this.modelName = modelName
	}
	getModeName(){
	return this.getModeName
	}
}

class ElectricCar extends Car{
	constructor(modelName, modelYear){
		super(this.getModelName)
		this.modelYear = modelYear
	}
	getModelYear(){
		return this.getModelYear
	}
}

visualstudio 와 visualstudiocode의 차이점
vs는 ide, code는 메모장 + 확장 가능

nodejs lts 다운
cmd에서 C:\Users\Admin\WebApp\node\oracle_test1 이동후
npm init, npm install oracledb, npm install express

오라클 클라이언트

https://www.oracle.com/database/technologies/instant-client/downloads.html

환경변수 Path 추가
C:\App\instantclient_21_6


instantclient-basic, sdk 다운후 sdk폴더에있는 파일 basic에 넣기
powershell 리눅스 명령어 사용 가능, 옵션을 설정해야하는 불편함

const fs = require('fs')
const {Console} = require('console')

//파일 쓰기가 가능하도록 스트림 생성
const output = fs.createWriteStream('./stdout.log') // 파일 쓰기 가능하도록 스트림 생성
const errorOutput = fs.createWriteStream('./stderr.log') 

const logger = new Console({ stdout: output, stderr: errorOutput}) //콘솔객체 생성
const count = 5;
logger.log('count: %d, count') //stdout.log 파일에 count : 5 기록
logger.error('count: ' + count) //stderr.log 파일에 count : 5 기록

모두 같은 출력
console.log('hello world')
console.log('hello %s', 'world')

const world = 'world'
console.log(`hello ${world}`)

//에러 출력
console.error(new Error('에러 메시지 출력'))

//테이블 형태로  배열 데이터 출력
const arr = [
    {name: 'John Doe', email: 'john@mail.com'},
    {name: 'Jeremy go', email: 'j@mail.com'}
]
console.table(arr)

const obj = {
    student : {
        grade1: {class1:{}, class:{}},
        grade2: {class1:{}, class:{}},
        teacher: ['John Doe', 'Jeremy Go']
    }
}

// console.log(obj)
console.dir(obj, {depth:1, colors:true}) //출력할 객체의 깊이와 메시지 출력

console.time('time for for-loop')//실행시간 측정 시작
for(let i=0; i<999999; i++){}
console.timeEnd('time for for-loop')

// const timeout = setTimeout( () => (
//     console.log('1초후에 실행됩니다.')
//  ), 1000)

const internal = require("stream")

const interval = setInterval( () => {
    console.log('1초마다 실행됩니다.')
}, 1000)

const immediate = setImmediate( () => [
    console.log('setImmediate() 함수 호출 뒤에 오는 모든 코드를 먼저실행')
]
)
console.log('setImmediate보다 먼저 실행됩니다.')

setTimeout( ()=>{
    clearInterval(interval) //변수명이 interval인 1초마다 콘솔창에 출력
    //setinterval() 함수를 종료합니다.
}, 5000)

//import process from 'process'

process.on('beforeExit', (code) =>{
    console.log('2. 이벤트 루프에 등록된 작업이 모두종료된 후 노드 프로세스를 종료하기 직전: ',code)
	//데이터 검증
})

process.on('exit', (code)=> {
    console.log('3. 노드 프로세스가 종료될 때: ', code)
	//리소스 반환
	// 암호화
})

console.log('1. 콘솔에 출력되는 첫 번째 메시지')

const{ join } =require('path')
const{nextTick} = require('process')
const process = require('process')

console.log('strat')

setTimeout( () => {
    console.log('timeout callback')
}, 0)

nextTick( () =>{
    console.log('nextTick callBack')
})

console.log('end')
//이벤트 루프는 다른 콜백함수보다 nextTick에 인수로 전달됨
//콜백 함수를 우선처리 합니다.

https://www.javatpoint.com/expressjs-get

html-->
html template --> EJS
  		Jade
		Mustache

get_example.js, index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">

</head>
<body>
    <html>  
<form action="http://127.0.0.1:3000/process_get" method="GET">  
First Name: <input type="text" name="first_name">  <br>  
Last Name: <input type="text" name="last_name">  
<input type="submit" value="Submit">  
</form>  
</body>
</html>

//122p 응답메소드 참고
var express = require('express');  
var app = express();  
app.use(express.static('public'));   //파일을 넣을 수 있습니다.
  
app.get('/index.html', function (req, res) {  
   res.sendFile( __dirname + "/" + "index.html" );  
})  
app.get('/process_get', function (req, res) {  
response = {  
       first_name:req.query.first_name,  
       last_name:req.query.last_name  
   };  
   console.log(response);  
   res.end(JSON.stringify(response));  //JSON 타입으로 변환
})  
var server = app.listen(3000, function () {  
  
  var host = server.address().address  
  var port = server.address().port  
  console.log("Example app listening at http://%s:%s", host, port)  
  
})  

html값들을 javascrip로 던져줄수있다. get

메소드방식 post
var bodyParser = require('body-parser');  

