
npm install -g nodemon

powershell에서 nodemon을 사용하기 위해 관리자권한으로 실행한후

Set-ExecutionPolicy RemoteSigned명령어 실행후 y 하면 nodemon이 실행가능



app.js



const express = require('express')

const ejs = require('ejs')

const methodOverride = require('method-override')

const bodyParser = require("body-parser")



const app = express();



/* 환경설정 */

//뷰엔진 설정

app.set('view engine', 'ejs')

app.use(express.json()) // To parse the incoming requests with JSON payloads

app.use(express.urlencoded({extended: true})); 

app.use(bodyParser.urlencoded({extended: true}))



/* 메소드 오버라이드

   사용법 

   <form action="/api/<%= post._id %>?_method="PUT" method="POST">

   </form>

*/

app.use(methodOverride('_method'))



app.use(express.json({

    limit: '50mb'

}))



app.listen(3000, () => {

    console.log("Server Started port 3000...")

});



app.get('/', function(req, res){

    res.send('Main Page')

});

app.get('/ejs', function(req,res){

    res.render('test1')

});

app.post('/ejs', async(req, res) =>{

    var box1 = Number(req.body.box1);

    var box2 = Number(req.body.box2);



    var hap = box1 + box2;

    res.send(String(hap))

})



app.get('/ejs2', function(req,res){

    res.render('test2')

});

app.post('/ejs2', async(req, res) =>{

    obj = {

        plus: Number(req.body.plus_box1) + Number(req.body.plus_box2),

        minus: Number(req.body.minus_box1) - Number(req.body.minus_box2),

        multi: Number(req.body.multi_box1) * Number(req.body.multi_box2),

        divide: Number(req.body.divide_box1) / Number(req.body.divide_box2)

    }

    

    req.body.param = obj;

    res.render('test3.ejs', {'data' : obj} )

})

test1.ejs



<!DOCTYPE html>

<html lang="ko">

<head>

    <meta charset="UTF-8">

    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Document</title>

</head>

<body>

    <h1> Test 1 </h1>

    <FORM action="/ejs" method="post">

        상자1 : <INPUT TYPE="text" NAME="box1" VALUE="100" placeholder="first number"> <p></p>

        상자2 : <INPUT TYPE="text" NAME="box2" VALUE="200" placeholder="second number"> <p></p>

    <INPUT TYPE="submit" VALUE="삽입"> 

</body>

</html>

test2.ejs

<!DOCTYPE html>

<html lang="ko">

<head>

    <meta charset="UTF-8">

    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Document</title>

</head>

<body>

    <h1> 더하기 </h1>

    <FORM action="/ejs2" method="post">

        상자1 : <INPUT TYPE="text" NAME="plus_box1" VALUE="100" placeholder="first number"> <p></p>

        상자2 : <INPUT TYPE="text" NAME="plus_box2" VALUE="200" placeholder="second number"> <p></p>

    <h1> 빼기 </h1>

        상자1 : <INPUT TYPE="text" NAME="minus_box1" VALUE="100" placeholder="first number"> <p></p>

        상자2 : <INPUT TYPE="text" NAME="minus_box2" VALUE="200" placeholder="second number"> <p></p>       

    <h1> 곱하기 </h1>

        상자1 : <INPUT TYPE="text" NAME="multi_box1" VALUE="100" placeholder="first number"> <p></p>

        상자2 : <INPUT TYPE="text" NAME="multi_box2" VALUE="200" placeholder="second number"> <p></p>

    <h1> 나누기 </h1>

        상자1 : <INPUT TYPE="text" NAME="divide_box1" VALUE="100" placeholder="first number"> <p></p>

        상자2 : <INPUT TYPE="text" NAME="divide_box2" VALUE="200" placeholder="second number"> <p></p>

    <INPUT TYPE="submit" VALUE="삽입">                 

</body>

</html>

test3.ejs

<!DOCTYPE html>

<html lang="ko">

<head>

    <meta charset="UTF-8">

    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Document</title>

</head>

<body>

    <p >더하기</p>

    <p ><%= data.plus %></p>

    <p >빼기</p>

    <p><%= data.minus %></p>

    <p >곱하기</p>

    <p ><%= data.multi %></p>

    <p>나누기</p>      

    <p ><%= data.divide %></p>

</body>

</html>



result.ejs

<!DOCTYPE html>

<html lang="ko">

<head>

    <meta charset="UTF-8">

    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Document</title>

</head>

<body>

<table border="1">

    <h1>전체 입력한 값</h1>

    <tr>

        <td>이름</td>

        <td>제품</td>

        <td>구매시간</td>

    </tr>

        <tr>

        <td><%= data[data.length-1].name%></td>          

        <td><%= data[data.length-1].product%></td>

        <td><%= data[data.length-1].date %></td>

    </tr>

</table>

<table border="2">

        <h1>전체 입력한 값</h1>

        <tr>

            <td>아이디</td>

            <td>이름</td>

            <td>제품</td>

            <td>구매시간</td>

        </tr>

        <% for (var i=0; i<data.length; i++){%>

            <tr>

            <td><%= data[i].id%></td>                

            <td><%= data[i].name%></td>

            <td><%= data[i].product%></td>

            <td><%= data[i].date%></td>

             </tr>

        <% }%>

    </table>

</body>

</html>



buy.ejs

<!DOCTYPE html>

<html lang="ko">

<head>

    <meta charset="UTF-8">

    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Document</title>

</head>

<body>

    <h1> Test 1 </h1>

    <FORM action="/ejs/insert" method="post">

        이름 : <INPUT TYPE="text" NAME="name" VALUE="홍길동"> <p></p>

        상품 : <INPUT TYPE="text" NAME="product" VALUE="아이폰"> <p></p>

        <INPUT TYPE="submit" VALUE="시간정보 출력"> 

</body>

</html>



app_sql.js

const express = require('express')

require('dotenv').config({path: 'mysql/.env'})

require('date-utils')



const mysql = require('./mysql')

const ejs = require('ejs')

const app = express();



app.set('view engine', 'ejs')

var methodOverride = require('method-override')

app.use(methodOverride('_method'))

app.use(express.json()) // To parse the incoming requests with JSON payloads

app.use(express.urlencoded({extended: true})); 



app.use(express.json({

    limit: '50mb'

}))



app.listen(3000, () => {

    console.log("Server Started port 3000...")

});



app.get('/', function(req, res){

    res.send('Main Page')

});

app.get('/ejs', function(req,res){

    res.render('buy')

});



app.get('/api/customers', async(req, res) => {

    const customers = await mysql.query('customerList');

    console.log(customers);

    res.send(customers);

});





app.post('/ejs/insert', async(req, res) => {

    var newDate = new Date()

    obj = {

    name : req.body.name,

    product : req.body.product, 

    date : newDate.toFormat('YYYY-MM-DD HH24:MI:SS')

    }

    req.body.param = obj

    const result = await mysql.query('customerInsert', req.body.param);



    const purchase = await mysql.query('customerList');

    const obj2 = []

    for(var i=0; i< purchase.length; i++){

        obj2[i] = {

            name: purchase[i].name,

            product: purchase[i].product,

            date: purchase[i].buytime

        }

    }



    res.render('result',{data:obj2});

});

package.json

{

  "name": "07",

  "version": "1.0.0",

  "description": "",

  "main": "app_sql.js",

  "scripts": {

    "test": "echo \"Error: no test specified\" && exit 1"

  },

  "author": "",

  "license": "ISC",

  "dependencies": {

    "date-utils": "^1.2.21",

    "dotenv": "^16.0.2",

    "ejs": "^3.1.8",

    "express": "^4.18.1",

    "method-override": "^3.0.0",

    "mysql": "^2.18.1"

  }

}




1. 단계  



   C# 프로그램을 이용하여



   현재 시간을 1초마다 20개 입력합니다. time.txt





using System;

using System.Collections.Generic;

using System.IO;

using System.Linq;

using System.Text;

using System.Threading.Tasks;



namespace ConsoleApp4

{

    internal class Program

    {

        static void Main(string[] args)

        {

            using (FileStream fs = new FileStream("test.txt", FileMode.Create))

            {

                StreamWriter sw = new StreamWriter(fs, Encoding.UTF8);



                for (int i = 0; i < 20; i++) { 

                sw.WriteLine(DateTime.Now.ToString("yyyy - MM - dd HH: mm: ss"));

                sw.Flush();

            }

                sw.Close();

                fs.Close();

            }



        }

    }

}











1.5 단계



   node.js의 morgan 모듈을 이용하여 현재 시간을 5개 time.txt에 출력해 봅니다.



