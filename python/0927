단축키 
a위에 새창 b밑에 새창 00리스타트
m 마크다운 언어
h 설명서

데이터 분석 딕셔너리 리스트
딕셔너리 안에 딕셔너리

파이썬의 중요한 부분 딕셔너리 데이터를 이용하는 것

파이썬의 for문은 요소하나하나를 가져와서 반복하는 방식
for i in range(1, 100)

딕셔너리에 쓸수있는 3가지 함수
alphabet =.keys() //키값을 리스트로 받아 출력
.values() //밸류값을 정보를 시스트로 받아 출력
값이 들어가는 순서는 있음
.items 두개를 동시에 불러옴 리스트에서 하나의 값을 튜플에 담아 출력

for k, v in a alphabet.items():
print(k, v) // for 문에서 두개의 매개변수를 만들어 요소를 집어넣을 수 있음

파이썬 함수화하기
매개변수를 재외한 식을 들여쓰기해서
위에 def 함수이름()으로 만들고
식의 마지막에 return 값을 넣어줌

return {'alpha' : aplpha_list, 'max_cnt':max(alphabet.values())}
리턴 값을 키와 밸류값으로 리턴할수있음
alphabet_cnt(S)['alpha']

Numpy 수학적 계산을 위해 사용 
파이썬에서 리스트(집합체)가 아닌 배열을 사용하기 위해 사용한다.

파이썬 리스트 메모리에 데이터의 주소값이 저장되어있음
배열안에 자료형이 모두 같음

Numpy 기초
용어 정리
Axis 배열릐 각 축
Rank 축의수(차원의수)
Shape 축의 길이
import numpy as np

a = np.array(1)
a
ndarr_1 = np.array([1,2,3])
print(ndarr_1)
ndarr_2 = np.array([1,2.0,3]) ##자료형이 다르기 때문에
print(ndarr_2)
ndarr_3 = np.array([1, 2.0, '3'])
print(ndarr_3)
np.arr = np.array([1,2,'3'], dtype = np.int8) ## 타입을 바꿈
print(np.arr)

2j 숫자뒤 j 하면 허수

ndarr_1.ndim 차원
ndarr_1.shape

Scalar : 숫자
Vector: scalar의 배열, 1차원 배열
Matrix: vector의 배열, 2차원 배열
Tensor : matrix의 배열, 3차원 배열 이상

인덱싱하면 차원이 줄어든다.

print(arr[[0,0],[1,1]]) ##스칼라의 집합 벡터로 나타낼수 있다.

arr_2 = np.array([[1,2,3],
                 [4,5,6],
                 [7,8,9],
                 [10,11,12]])
b = np.array([0,1,2,3])
c = np.array([0,2,0,1])

arr_2[b,c] ## array를 list와 동일하게 넣었다.

Boolean 인덱싱
arr = np.array([1,2,3,4,5])
arr[[ True, False, True, True, False ]]
결과값을 False는 생략 True만 가져옴

tensor = np.array([[[1,2,3],
                   [4,5,6]],
                   [[7,8,9],
                   [10,11,12]]])
print(tensor)

[[[ 1  2  3]  	## 랭크 0
  [ 4  5  6]]

 [[ 7  8  9]
  [10 11 12]]]   ## 랭크 1
인덱싱을 사용 [10 2 6]
#10 > 1 1 0 
#2 > 0 0 1
#6 > 0 1 2
tensor [[ 1,0,0], [1,0,1], [0,1,2]]## 세로로 하나씩해서 만듬

인덱싱, 슬라이싱
[[1 2] [4 5]]
print(tensor[0,:,:2])
0랭크 전체 선택 뒤에 2개값 출력위해 :2

[9 10]
print(tensor[1,:,-1])
print(tensor[1,:,[2]]) ## 2차원으로 출력하고싶으면이렇게
1랭크 전체 선택 마지막 값만 출력

reshape 배열의 요소 개수를 유지하며 형태만 변경

1은 곱해도 값이 같기때문에 1을 넣어서 차원의 개수를 계속 늘릴수 있음
앞에 1을 넣는이유 reshape(1,6)을 해서 모양이 흐트러 지지 않고 배열이 생성됨
배열에 -1넣어 마지막에 값을 컴퓨터에서 알아서 처리해줌
?x2 배열로 변형
print(arr.reshape(-1,2)) 컬럼의 개수는 알지만 로우의 개수는 모를때
정수로 나누어 떨어져서 사용할수 있다

