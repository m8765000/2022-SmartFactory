
1. 오라클11g 설치 후 hr 계정을 오픈하는 방법은??



 1-1. sqlplus열기 ---> 접속?

  $> sqlplus system/[설치시 넣은 패스워드]

 1-2. ALTER USER hr IDENTIFIED BY hr ACCOUNT UNLOCK;

 

 1-3  CONN hr/hr;

2. 오라클 시작시 테이블 구성을 모를 때 전체 테이블을 조회하는 명령어는???

SELECT * FROM tab;



SELECT * FROM TAB;

SELECT * FROM SYSFILES;



#오라클 내장함수

SELECT ENAME, UPPER(ENAME), LOWER(ENAME), INITCAP(ENAME) FROM EMP;

INITCAP은 첫글자는 대문자로, 나머지 문자는 소문자로 반환



#UPPER함수로 문자열 비교하기(사원이름이 SCOTT인 데이터 찾기)

SELECT * FROM EMP

WHERE UPPER(ENAME) = UPPER('scott');

#UPPER함수로 문자열 비교하기(사원이름에 SCOTT 단어를 포함한 데이터 찾기)

SELECT *

FROM EMP

WHERE UPPER(ENAME) LIKE UPPER('%scott%');



#문자열의 길이를 구하는 함수

SELECT ENAME, LENGTH(ENAME) FROM EMP

WHERE LENGTH(ENAME) < 5;



#한글길이 비교

SELECT LENGTH('한글'), LENGTHB('한글') FROM DUAL;

UTF-8 기준 한글은 한문자당 3바이트로 처리됨 그래서 6바이트가 나옴 

DUAL은 더미데이터, 함수연산 결과ㅏ값확인 용도로 사용



#사용빈도가 높은 단일행 함수 SUBSTR

SELECT JOB, SUBSTR(JOB, 1, 2) FROM EMP;

SUBSTR(문자열데이터, 시작위치, 추출길이)



#SUBSTR 사용해서 모든 사원 이름을 세번째 글자부터 끝까지 출력되려면 어떻게

SELECT ENAME, SUBSTR(ENAME, 1) FROM EMP;



SELECT JOB,

        SUBSTR(JOB, -LENGTH(JOB)),

        SUBSTR(JOB, -LENGTH(JOB),2),

        SUBSTR(JOB, -3)

FROM EMP;



#주민등록번호에서 생일만 출력해 주세요.

#980326

SELECT SUBSTR('980326', 3,4) FROM DUAL;

SELECT SUBSTR('980326', 1,2) FROM DUAL;



#문자열 안에서 특정 문자 위치를 찾는 INSTR

SELECT INSTR('반갑습니다. 오라클~!', '오') AS 컬럼, 

    INSTR('반갑습니다. 오라클~!', '습') AS 컬럼2

FROM DUAL;

공백까지 해서 8 그리고 3이 나옴



#특정 문자를 포함하고 있는 행 찾기

SELECT * FROM EMP

WHERE INSTR(ENAME, 'S') > 0;



SELECT * FROM EMP

WHERE ENAME LIKE '%S%';



#문자열 변환

SELECT '010-1234-5678',

        REPLACE('010-1234-5678', '-', ' ')

FROM DUAL;



SELECT '091101-3123456',

        REPLACE('091101-3123456', '-'),

        REPLACE('091101-3123456', '90', '95')

FROM DUAL;



#빈공간을 채우는 함수 PAD

SELECT 'Oracle',

    LPAD('Oracle', 10, '#'),

    RPAD('Oracle', 10, '#'),

    LPAD('Oracle', 10)

FROM DUAL;



#주민번호 가리기

SELECT RPAD('971225-', 14, '*'),

        RPAD('010-1234-', 13, '*')

FROM DUAL;



#문자 결합 ( + )

SELECT CONCAT(EMPNO, ENAME) FROM EMP WHERE ENAME = 'SCOTT';

#문자 결합 기호

SELECT EMPNO ||'/'|| ENAME FROM EMP;



#공백제거

SELECT '                   Oracle                           ',

        LTRIM ('           Oracle          '),

        RTRIM ('           Oracle          '),

        TRIM ('           Oracle          ')

FROM DUAL;



#데이터 정의어

CREATE TABLE EMP_DDL01 (

    EMPNO NUMBER(4),

    ENAME VARCHAR2(10)

);



DESC EMP_DDL01;



#테이블 삭제

DROP TABLE EMP_DDL01;

#데이터 삽입

INSERT INTO EMP_DDL01(EMPNO, ENAME)

VALUES (1, '홍길동');

#조회

SELECT * FROM EMP_DDL01;



#P266

#DEPT 테이블을 복사해서 DEPT_TEMP 테이블을 만들어 봅시다.

CREATE TABLE DEPT_TEMP AS select * from dept;



SELECT * FROM DEPT_TEMP;

#10-3

INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)

                VALUES (50, 'DATABASE', 'SEOUL');

SELECT * FROM DEPT_TEMP;



#60번 부서 'COMPUTER' 위치 'SEOUL'

INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)

            VALUES (60, 'COMPUTER', 'SEOUL');

SELECT * FROM DEPT_TEMP;



UPdate DEPT_TEMP set LOC = 'ANDONG' WHERE DEPTNO = 50;



#컴퓨터 부서를 BUSAN으로 수정해 보세요

UPDATE DEPT_TEMP SET LOC='Busan' WHERE DEPTNO = 60;

COMMIT; 커밋을해야 완성이 됨 하지만 수정하기 어려워짐



#NULL 입력

INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)

VALUES(70, 'WEB', NULL);



INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)

VALUES(80, 'MOBILE', ''); # 공백문자는 NULL로 인식한다.

SELECT * FROM DEPT_TEMP;



DELETE FROM DEPT_TEMP WHERE DEPTNO = 80;



#10-7

#열 데이터를 넣지 않는 방식으로 NULL 데이터 입력

INSERT INTO DEPT_TEMP (DEPTNO, LOC)

VALUES(80, 'INCHEON');



SELECT * FROM DEPT_TEMP;



#데이터 없이 테이블 복사하기 구조만 복사 내용은 없다.

#10-8

CREATE TABLE EMP_TEMP

 AS SELECT * FROM EMP WHERE 1 <> 1;



#EMP_TEMP 테이블을 삭제하고 내용까지 복사한 EMP_TEMP파일을 만들어 봅시다.

DROP TABLE EMP_TEMP;



CREATE TABLE EMP_TEMP AS SELECT * FROM EMP;



1단계 프로그램







ADDR_ID  NAME         HP          



1         홍길동    010-1111-1111



2         강호동    010-2222-2222



3         유재석    010-3333-3333







C#을 이용하여 다음과 같은 프로그램을 만들어 주세요.







콘솔 메뉴를 만든 후 번호를 누르면 해당 작업을 수행하여 주세요.







1. 데이터 삽입



2. 데이터 삭제



3. 데이터 조회



4. 데이터 수정







---------------------------------------------------------



1. 데이터 삽입



2. 데이터 삭제



3. 데이터 조회



4. 데이터 수정







메뉴 : 1 







데이터가 생성되었습니다.



------------------------------------------------------------



1. 데이터 삽입



2. 데이터 삭제



3. 데이터 조회



4. 데이터 수정







메뉴 : 2 







이름을 입력해 주세요 : 홍길동



전화번호를 입력해 주세요 : 010-1111-1111







데이터가 정상적으로 입력되었습니다.



-----------------------------------------------------------------



1. 데이터 삽입



2. 데이터 삭제



3. 데이터 조회



4. 데이터 수정







메뉴 : 3 







ADDR_ID  NAME         HP         



1         홍길동    010-1111-1111











################################################################################



2단계 프로그램















ADDR_ID  NAME         HP          



1         홍길동    010-1111-1111



2         강호동    010-2222-2222



3         유재석    010-3333-3333







C#을 이용하여 다음과 같은 테이블(ADDR_TABLE) 을 만들고







ADDR_ID는 NUMBER(4)  PRIMARY KEY로 만들어 주세요.



NAME, HP 의 타입은 모두 VARCHAR2(20)







콘솔 메뉴를 만든 후 번호를 누르면 해당 작업을 수행하여 주세요.







1. 테이블 생성



2. 테이블 삽입



3. 테이블 조회



4. 테이블 수정



---------------------------------------------------------



1. 테이블 생성



2. 테이블 삽입



3. 테이블 조회



4. 테이블 수정





메뉴 : 1







테이블이 생성되었습니다.



------------------------------------------------------------



1. 테이블 생성



2. 테이블 삽입



3. 테이블 조회



4. 테이블 수정





메뉴 : 2







이름을 입력해 주세요 : 홍길동



전화번호를 입력해 주세요 : 010-1111-1111







데이터가 정상적으로 입력되었습니다.



-----------------------------------------------------------------



1. 테이블 생성



2. 테이블 삽입



3. 테이블 조회



4. 테이블 수정





메뉴 : 3







ADDR_ID  NAME         HP         





1         홍길동    010-1111-1111





------------------------------------------------







﻿1. 주소록 조회 



2. 주소록 추가



3. 주소록 수정



4. 주소록 삭제







메뉴 : _______

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;



namespace DBApp01

{

    class Student

    {

        //private int id;

        //private string name;

        //private string pnumber;



        public int ID { get; set; }

        public string Name { get; set; }

        public string Pnumber { get; set; }



        public Student (int id, string name, string pnumber)

        {

            ID = id;

            Name = name;

            Pnumber = pnumber;

        }

    }

    internal class Program

    {

        private static bool StringEquals(string str)

        {

            return str.Equals(str);

        }

        static void Main(string[] args)

        {

            List<Student> Students = new List<Student>();

            Student st = new Student(1, "홍길동", "010-1111-1111");

            Students.Add(st);



            while (true)

            {

                Console.WriteLine("1. 데이터  삽입");

                Console.WriteLine("2. 데이터  삭제");

                Console.WriteLine("3. 데이터  조회");

                Console.WriteLine("4. 데이터  수정");

                Console.WriteLine("5. 종료" + Environment.NewLine);

                string num = Console.ReadLine();

                switch (num)

                {

                    case "1":

                        if (Students.Count == 0)

                        {

                            st = new Student(1, "홍길동", "010-1111-1111");

                            Students.Add(st);

                            Console.WriteLine("데이터가 생성되었습니다." + Environment.NewLine);

                        }

                        else if (Students.Count == 1)

                        {

                            st = new Student(2, "강호동", "010-2222-2222");

                            Students.Add(st);

                            Console.WriteLine("데이터가 생성되었습니다." + Environment.NewLine);

                        }

                        else if (Students.Count == 2)

                        {

                            st = new Student(3, "유재석", "010-3333-3333");

                            Students.Add(st);

                            Console.WriteLine("데이터가 생성되었습니다." + Environment.NewLine);

                        }

                        else

                            Console.WriteLine("삽입 할 데이터가 없습니다." + Environment.NewLine);

                        break;

                    case "2":

                        Console.WriteLine("이름을 입력해주세요 : ");

                        string delname = Console.ReadLine();

                        for(int i =0; i<Students.Count; i++)

                        {

                            if (Students[i].Name == delname)

                                Students.RemoveAt(i);

                            Console.WriteLine("데이터가 정상적으로 입력되었습니다." + Environment.NewLine);

                        }

                        break;

                    case "3":

                        Console.WriteLine($"{"순번",-10}{"이름",-15}{"전화번호",-15}");

                        foreach (Student s in Students)

                        {

                            Console.WriteLine($"{s.ID,-10}{s.Name,-15}{s.Pnumber,-15}");

                        }

                        break;

                    case "4":

                        Console.WriteLine($"{"순번",-10}{"이름",-15}{"전화번호",-15}");

                        foreach (Student s in Students)

                        {

                            Console.WriteLine($"{s.ID,-10}{s.Name,-15}{s.Pnumber,-15}");

                        }

                        Console.WriteLine("수정할 데이터 숫자 선택");

                        int id = int.Parse(Console.ReadLine());

                        string name = Console.ReadLine();

                        string pnum = Console.ReadLine();

                        Students.RemoveAt(id-1);

                        Students.Insert(id-1, new Student(id, name, pnum));



                        Console.WriteLine("데이터가 정상적으로 입력되었습니다." + Environment.NewLine);

                        break;

                    case "5":

                        Console.WriteLine("종료" + Environment.NewLine);

                        Environment.Exit(0);

                        break;

                }

            }

        }

    }

}
