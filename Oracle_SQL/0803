
Tcp ServerClient

using System;

using System.Collections.Generic;

using System.Linq;

using System.Net;

using System.Net.Sockets;

using System.Text;

using System.Threading;

using System.Threading.Tasks;



namespace TCP_ServerClient

{

    internal class Program

    {

        static void Main(string[] args)

        {

            Thread serverThread = new Thread(serverFunc);

            Thread clientThread = new Thread(clientFunc);

            serverThread.Start();

            clientThread.Start();



            serverThread.IsBackground = true;

            clientThread.IsBackground=true;



            serverThread.Join();

            clientThread.Join();



            Console.WriteLine("서버가 종료 되었습니다.");

        }



        private static void serverFunc(object obj)

        {

            try

            {   //1.소켓만들기

                Socket serverSock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

                IPEndPoint EndPoint = new IPEndPoint(IPAddress.Any, 1102);

                //2.bind()

                serverSock.Bind(EndPoint);

                //3.Listen()

                serverSock.Listen(10);

                

                while (true)

                {

                    // 4. accept()

                    Console.WriteLine("서버를 시작합니다.");

                    Socket clientSock = serverSock.Accept();

                    byte[] recvbytes = new byte[1024]; // 네트워크에서 길이를 읽기 위해, 최소512이상이 되어야함

                    clientSock.Receive(recvbytes);

                    string txt = Encoding.UTF8.GetString(recvbytes, 0, recvbytes.Length);

                    Console.WriteLine(txt); // 소켓에서 읽고 서버콘솔 화면에 출력



                    //write

                    byte[] sendbytes = Encoding.UTF8.GetBytes(txt);

                    clientSock.Send(sendbytes);

                    //6. close

                    clientSock.Close();



                }

            }

            catch(Exception e)

            {

                Console.WriteLine(e.Message);

            }

        }

        static void clientFunc(object obj)

        {

            try

            {

                //1.소켓만들기

                Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);



                //2.연결

                EndPoint serverEP = new IPEndPoint(IPAddress.Loopback, 1102); // Loopback => localhost

                socket.Connect(serverEP);

                //3.Read, Write

                //write

                byte[] buf = Encoding.UTF8.GetBytes(DateTime.Now.ToString()); // string으로하면 null문자가 들어감 차이에따라 char, string

                socket.Send(buf);

                //read

                byte[] recvbytes = new byte[1024];

                int nRecv = socket.Receive(recvbytes);

                string txt = Encoding.UTF8.GetString(recvbytes, 0, nRecv);

                Console.WriteLine(txt);

                //4.종료

                socket.Close();

            }

            catch (Exception e)

            {

                Console.WriteLine(e.Message);

            }

        }

    }

}

클라이언트 메시지 계속 보내기, delegate, thread 매개변수 주기



namespace TCP_client

{

    internal class Program

    {

        private delegate void SendMessage(string message); 

        static void Main(string[] args)

        {

            while (true)

            {

                string message = Console.ReadLine();

                SendMessage send = new SendMessage(clientFunc);

                send(message);

            }

            Thread clientThread = new Thread(clientFunc);

            clientThread.Start();

            clientThread.IsBackground = true;

            clientThread.Join();

        }



       static void clientFunc(object message)

        {

            try

            {

                //1.소켓만들기

                Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);



                //2.연결

                EndPoint serverEP = new IPEndPoint(IPAddress.Loopback, 1103); // Loopback => localhost

                socket.Connect(serverEP);

                //3.Read, Write

                //write

                string sendmessage = Convert.ToString(message);

                byte[] buf = Encoding.UTF8.GetBytes(sendmessage);

                socket.Send(buf);

                //read

                byte[] recvbytes = new byte[1024];

                int nRecv = socket.Receive(recvbytes);

                string txt = Encoding.UTF8.GetString(recvbytes, 0, nRecv);

                Console.WriteLine(txt);

                //4.종료

                if (message == "end")

                {

                    socket.Close();

                }

            }

            catch (Exception e)

            {

                Console.WriteLine(e.Message);

            }

        }



라이브러리 만드는 방법 연습



c#에서 라이브러리를 만드는 방법은 라이브러리 프로젝트를 생성하여



dll파일을 만들어 참조에 포함을 시키는 것입니다.



헤더파일에서 리턴을 받으면 복사된 메세지가 들어온다.



FPU 라이브러리 만들기 FPU.dll

body~MessageUtil까지 복사해서 클래스파일 추가해서 만들기

컴파일하면 debug에 dll파일생성됨

리시버 콘솔파일 만들기

FPUdll파일을 소스코드에 넣기 -> 참조추가 FPUdll파일추가

빨간줄뜬부분에 알트엔터 FPU using 가능함

프로젝트 속성 -> 명령줄 인수 : upload

샌드콘솔파일 생성 샌드파일에 dll 추가후 참조

프로젝트 속성 -> 명령줄 인수 -> 디버그 아이피 주소 파일이름 추가

샌드 폴더 -> 디버그폴더에 복사할 파일 추가

----------------------------------------------

오라클 데이터베이스

alter user hr identified by hr account unlock;



conn hr/hr;



select * from tab;



1. SQL 사용법

  1) 삽입        INSERT   Create

  2) 검색        SELECT   Read

  3) 수정        UPDATE  Update

  4) 삭제        DELETE   DELETE

CRUD 작업



  A.  단일함수

  B.  복합함수

  C.  그룹함수

  D.  Join => 테이블 결합

  E.  SubQuery 

-------------------------------------------------



2. DB 모델링 (경험)

-------------------------------------------------

select * from tab;

select * from employeees;

select last_name from employees order by last_name desc;
