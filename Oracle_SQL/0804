데몬(Demon) 프로그램 : 백그라운드에서 동작, 하는일은 주로 잠자는 일 서비스 요청이 오면 동작



오라클 서버에 접속해서 SQL 쿼리 명령어를 수행하는 프로그램

SQLDeveloper, Toad등등 여러가지가 있음



SQL은 대소문자를 구분하지 않지만 표준으로는 대문자를 많이 사용한다.



SELECT * FROM tab;

SELCET * FROM employees;

#이 주석

DESC 테이블 구성정보를 알려준다. 디스크라이브



SQL에서 사용되는 타입은 다르다 VARCHAR 문자 ,DATE타입, NUMBER타입



# 테이블 구성정보 살펴보기

DESC employees;



#부서 Departments 테이블을 전체 조회해 보세요.

SELECT * FROM DEPARTMENTS;

#부서 테이블의 타입을 조회해 주세요.

DESC DEPARTMENTS;

#지역 테이블 조회해 봅시다.

SELECT * FROM LOCATIONS;



#이름과 급여를 조회해 봅시다. 테이블은 EMPLOYEES

SELECT first_name, salary FROM employees;



#급여순으로 이름과 급여를 조회해 보고싶다. 오름차순으로 정렬해서 조회

SELECT first_name, salary FROM employees ORDER BY salary;

내림차순으로 정렬해서 조회

SELECT first_name, salary FROM employees ORDER BY salary DESC;



#직원테이블에서 EMPLOYEE_ID, First_Name,  Last_Name, Department_ID 조회를 해주세요

#단, 부서ID 기준 내림차순으로 정렬해 주세요.

SELECT EMPLOYEE_ID, First_Name, Last_Name, Department_ID FROM employees ORDER BY Department_ID DESC;

SQL에서는 컬럼의 순서를 바꿔서 조회할 수 있다.



SELECT MIN_SALARY FROM jobs ORDER BY MIN_SALARY;

#중복된 컬럼 자료를 제거하고 싶습니다.

SELECT DISTINCT MIN_SALARY FROM jobs ORDER BY MIN_SALARY;



#JOB_HISTORY에서 중복된 EMPLOYEE_ID를 제거하고 순수한 EMPLOY_ID만 출력해 주세요

SELECT DISTINCT EMPLOYEE_ID FROM JOB_HISTORY;



https://github.com/GroovySunday/doit-oracle

오라클 연습 예제들

Rem도 주석, GRANT 권한 주기, CONSTRAINT 제약사항 

#데이터 만들기

CREATE TABLE DEPT

       (DEPTNO NUMBER(2) CONSTRAINT PK_DEPT PRIMARY KEY,

 DNAME VARCHAR2(14) ,

 LOC VARCHAR2(13) ) ;



INSERT INTO DEPT VALUES

 (10,'ACCOUNTING','NEW YORK');

INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');

INSERT INTO DEPT VALUES

 (30,'SALES','CHICAGO');

INSERT INTO DEPT VALUES

 (40,'OPERATIONS','BOSTON');



DROP TABLE DEPT;

CREATE TABLE DEPT

       (DEPTNO NUMBER(2) CONSTRAINT PK_DEPT PRIMARY KEY,

 DNAME VARCHAR2(14) ,

 LOC VARCHAR2(13) ) ;

DROP TABLE EMP;

CREATE TABLE EMP

       (EMPNO NUMBER(4) CONSTRAINT PK_EMP PRIMARY KEY,

 ENAME VARCHAR2(10),

 JOB VARCHAR2(9),

 MGR NUMBER(4),

 HIREDATE DATE,

 SAL NUMBER(7,2),

 COMM NUMBER(7,2),

 DEPTNO NUMBER(2) CONSTRAINT FK_DEPTNO REFERENCES DEPT);

INSERT INTO DEPT VALUES

 (10,'ACCOUNTING','NEW YORK');

INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');

INSERT INTO DEPT VALUES

 (30,'SALES','CHICAGO');

INSERT INTO DEPT VALUES

 (40,'OPERATIONS','BOSTON');

INSERT INTO EMP VALUES

(7369,'SMITH','CLERK',7902,to_date('17-12-1980','dd-mm-yyyy'),800,NULL,20);

INSERT INTO EMP VALUES

(7499,'ALLEN','SALESMAN',7698,to_date('20-2-1981','dd-mm-yyyy'),1600,300,30);

INSERT INTO EMP VALUES

(7521,'WARD','SALESMAN',7698,to_date('22-2-1981','dd-mm-yyyy'),1250,500,30);

INSERT INTO EMP VALUES

(7566,'JONES','MANAGER',7839,to_date('2-4-1981','dd-mm-yyyy'),2975,NULL,20);

INSERT INTO EMP VALUES

(7654,'MARTIN','SALESMAN',7698,to_date('28-9-1981','dd-mm-yyyy'),1250,1400,30);

INSERT INTO EMP VALUES

(7698,'BLAKE','MANAGER',7839,to_date('1-5-1981','dd-mm-yyyy'),2850,NULL,30);

INSERT INTO EMP VALUES

(7782,'CLARK','MANAGER',7839,to_date('9-6-1981','dd-mm-yyyy'),2450,NULL,10);

INSERT INTO EMP VALUES

(7788,'SCOTT','ANALYST',7566,to_date('13-7-1987','dd-mm-yyyy')-85,3000,NULL,20);

INSERT INTO EMP VALUES

(7839,'KING','PRESIDENT',NULL,to_date('17-11-1981','dd-mm-yyyy'),5000,NULL,10);

INSERT INTO EMP VALUES

(7844,'TURNER','SALESMAN',7698,to_date('8-9-1981','dd-mm-yyyy'),1500,0,30);

INSERT INTO EMP VALUES

(7876,'ADAMS','CLERK',7788,to_date('13-7-1987','dd-mm-yyyy')-51,1100,NULL,20);

INSERT INTO EMP VALUES

(7900,'JAMES','CLERK',7698,to_date('3-12-1981','dd-mm-yyyy'),950,NULL,30);

INSERT INTO EMP VALUES

(7902,'FORD','ANALYST',7566,to_date('3-12-1981','dd-mm-yyyy'),3000,NULL,20);

INSERT INTO EMP VALUES

(7934,'MILLER','CLERK',7782,to_date('23-1-1982','dd-mm-yyyy'),1300,NULL,10);

DROP TABLE BONUS;

CREATE TABLE BONUS

 (

 ENAME VARCHAR2(10) ,

 JOB VARCHAR2(9)  ,

 SAL NUMBER,

 COMM NUMBER

 ) ;

DROP TABLE SALGRADE;

CREATE TABLE SALGRADE

      ( GRADE NUMBER,

 LOSAL NUMBER,

 HISAL NUMBER );

INSERT INTO SALGRADE VALUES (1,700,1200);

INSERT INTO SALGRADE VALUES (2,1201,1400);

INSERT INTO SALGRADE VALUES (3,1401,2000);

INSERT INTO SALGRADE VALUES (4,2001,3000);

INSERT INTO SALGRADE VALUES (5,3001,9999);

COMMIT;



최종적으로 데이터 값을 넣기 위해서 COMMIT을 해줘야 한다.



#사원 정보가 들어있는 EMP 테이블

DESC EMP;



#중복 열 제거

SELECT DISTINCT DEPTNO FROM EMP;



#ALL로 중복되는 열 제거 없이 그대로 출력하기

SELECT ALL JOB, DEPTNO FROM EMP;



#테이블에 연산식 칼럼을 삽입해 봅시다.

SELECT ENAME, SAL, COMM FROM EMP;



SELECT ENAME, SAL, SAL*12+COMM, COMM FROM EMP;

SELECT ENAME AS 이름, SAL AS 급여, SAL*12+COMM AS 연봉, COMM FROM EMP; 칼럼의 이름 을 바꿀수있다.

SELECT ENAME "이름", SAL 급여, SAL*12+COMM 연봉, COMM FROM EMP; AS를 생략해도 사용가능하다.



#사원 번호를 기준으로 내림차순이 정렬 되도록 코드를 채워 보세요.

SELECT * FROM EMP ORDER BY EMPNO DESC;



#92P 2번 문제

SELECT DISTINCT JOB FROM EMP;



#조건의 WHERE을 배워 봅시다.

SELECT * FROM EMP;

#부서 번호가 30번인 직원 모두를 출력해 봅시다.

SELECT * FROM EMP

WHERE deptno=30;



데이터 베이스 깊게 공부하고싶을때 책 

http://www.yes24.com/Product/Goods/1820583

빅데이터, 인공지능

https://www.splunk.com/ko_kr



https://www.elastic.co/kr/



#월급을 $950 받는 직원의 이름은 어떻게 됩니까? 

SELECT ENAME FROM EMP WHERE SAL = 950;



#업무는 "SALESMAN" 부서정보는 30번인 직원의 레코드 정보는

#업무는 "SALESMAN" 부서정보는 30번인 직원의 레코드 정보는

SELECT * FROM EMP WHERE JOB = 'SALESMAN'; AND DEPTNO=30;

컬럼안의 내용을 확인할때는 홑따옴표



#사원번호가 (EMPTNO)가 7499이고 부서번호 (DEPTNO)가 30번인 사원 정보를 출력하세요

SELECT * FROM EMP WHERE EMPNO = 7499 AND DEPTNO = 30;



#부서번호 20번이거나 직업이 'SALESMAN'인 사원의 정보가 나오도록 코드를 채워보세요.

SELECT * FROM EMP WHERE DEPTNO = 20 OR JOB = 'SALESMAN';

프로토콜을 이용하여 통신작업을 할경우 언어가 달라도 상관이 없다.



#사원 번호를 기준으로 내림차순 정렬 되도록 코드를 채워 보세요.

#부서번호가 30번인 직원 데이터 모두를 출력해 봅시다.

#월급을 $950 받는 직원의 이름은 어떻게 됩니까???

#사원번호(EMPNO)가 7499이고 부서번호(DEPTNO)가 30번인 사원 정보를 출력하세요!!!!

#부서번호 20번 이거나(or) 직업이 'SALESMAN'인 사원의 정보만 나오도록 코드를 채워보세요.



#산술 연잔자를 사용한 예

SELECT * FROM EMP WHERE SAL * 12 = 36000;



#급여가 $2300 이상이고 직업이 'ANALYST'인 사원의 정보는?

SELECT * FROM EMP WHERE SAL >= 2300 AND JOB = 'ANALYST';



#문자 대소비교 연산자로 비교하기

SELECT * FROM EMP WHERE ENAME <= 'B';



SELECT * FROM EMP WHERE SAL != 3000;

SELECT * FROM EMP WHERE SAL <> 3000; 같은 값이 출력됨

SELECT * FROM EMP WHERE SAL ^= 3000;

같은 식은 아니지만 부정연산자를 사용해 값은 값이 출력

SELECT * FROM EMP WHERE NOT SAL = 3000;



# 지정된 조건에 맞는 데이터 찾는 방법

# IN

# JOB이 MANAGER, SALESMAN, CLEAR인 조건인 직원테이블에서 검색해 주세요

SELECT * FROM EMP WHERE  JOB IN ('MANAGER', 'SALESMAN', 'CLEAR');



#앞조건이 아닌 직원

SELECT * FROM EMP WHERE  JOB NOT IN ('MANAGER', 'SALESMAN', 'CLEAR');



#급여가 $2000 이상 $3000 이하인 직원은?

SELECT * FROM EMP WHERE SAL BETWEEN 2000 AND 3000;



c# 오라클 연결

도구-> nuget패키지 관리 -> 오라클 검색 -> 2번째 오라클 설치

using Oracle.ManagedDataAccess.Client;

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;



namespace OracleTest01

{

    internal class Program

    {

        static void Main(string[] args)

        {

            //1. 오라클 모듈 받기



            // 오라클 연결 문자열        

            //string strConn = "Data Source=orcl;User Id=scott;Password=TIGER;";

            // 네트워크 연결 정보 직접 대입

            string strConn = "Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=xe)));User Id=hr;Password=hr;";



            // 오라클 연결

            OracleConnection conn = new OracleConnection(strConn);



            conn.Open();

            Console.WriteLine("연결되었습니다.");

            //...



            conn.Close();

            Console.WriteLine("연결이 종료 되었습니다.");

        }

    }

}



using Oracle.ManagedDataAccess.Client;

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;



namespace OracleTest02

{

    internal class Program

    {

        static void Main(string[] args)

        {

            // 오라클 연결 문자열        

            //string strConn = "Data Source=orcl;User Id=scott;Password=TIGER;";

            // 네트워크 연결 정보 직접 대입

            string strConn = "Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=xe)));User Id=hr;Password=hr;";



            // 오라클 연결

            OracleConnection conn = new OracleConnection(strConn);

            conn.Open();

            // 명령 객체 생성 쿼리

            OracleCommand cmd = new OracleCommand();

            cmd.Connection = conn;

            // SQL문 지정 및 INSERT 실행

            cmd.CommandText = "select * from emp";

            //cmd.ExecuteNonQuery();

            // 결과 리더 객체를 리턴

            OracleDataReader rdr = cmd.ExecuteReader();

            // 레코드 계속 가져와서 루핑, 0되면 끝남

            while (rdr.Read())

            {

                // 필드 데이타 읽기

                string ename = rdr["ename"] as string; //varchar 는 모르니 string 으로 변환

                string job = rdr["job"] as string;

                //int sal = rdr.GetInt32(5);

                string sal = rdr["sal"].ToString();

                // 데이타를 리스트박스에 추가

                Console.WriteLine($"{ename}:{job}:{sal}");

            }

            // 사용후 닫음

            conn.Close();

        }

    }

}



#LIKE 연산자 문자열 검색

SELECT * FROM EMP WHERE ENAME LIKE 'S%';



#두번째 이름이 L로 시작

SELECT * FROM EMP WHERE ENAME LIKE '_L%';



#글자에서 "AM"이 포함된 이름 전체

SELECT * FROM EMP WHERE ENAME LIKE '%AM%';

#AM이 포함 되어 있지 않는 이름

SELECT * FROM EMP WHERE ENAME NOT LIKE '%AM%';



#등가 비교 연산자 NULL로 비교하기

SELECT * FROM EMP WHERE COMM = NULL; # 사용하지 않는 방식

SELECT * FROM EMP WHERE COMM IS NULL;  # 사용되는 방식



#AND 연산자와 IS NULL 연산자 사용하기

SELECT * FROM EMP WHERE SAL > NULL OR COMM IS NULL;



#UNION 합집합

#1

SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10;

#2

SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 20;

#3

SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10

UNION

SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 20;



# 5-36 EMP전체 에서 빼기 DEPTNO =10인

SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP

MINUS

SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10;



SQL은 한번에 끝내는 식으로 사용해라 위의 식 경우는 잘 사용하지 않는다.

데이터베이스가 큰 곳은 오버헤드 발생때문에 *(아스트릭 라틴어)를 사용하지 않는다.



#INTERSECT 5-37 교집함

SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP

INTERSECT

SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10;



#1

SELECT * FROM EMP WHERE ENAME LIKE '%S';

#2

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP WHERE DEPTNO = 30 AND JOB = 'SALESMAN';

#3

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP WHERE DEPTNO IN (20, 30) AND SAL > 2000;

#3

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP WHERE DEPTNO IN (20, 30)

INTERSECT

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP WHERE SAL > 2000;

#4

SELECT * FROM EMP

MINUS

SELECT * FROM EMP WHERE SAL >= 2000 AND SAL<= 3000;



SELECT * FROM EMP WHERE SAL< 2000

UNION

SELECT * FROM EMP WHERE SAL> 3000;

#5

SELECT ENAME, EMPNO, SAL, DEPTNO FROM EMP 

WHERE DEPTNO=30 AND 

ENAME LIKE '%E%' AND 

SAL NOT BETWEEN 1000 AND 2000; 

#6

SELECT * FROM EMP WHERE 

COMM IS NULL AND JOB IN ('MANAGER', 'CLERK') AND

ENAME NOT LIKE '_L%';
